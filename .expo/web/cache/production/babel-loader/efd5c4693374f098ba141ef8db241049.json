{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from\"react\";import Image from\"react-native-web/dist/exports/Image\";import{AppLoading}from\"expo\";import{useFonts}from'@use-expo/font';import{Asset}from\"expo-asset\";import{Block,GalioProvider}from\"galio-framework\";import{NavigationContainer}from\"@react-navigation/native\";import{enableScreens}from\"react-native-screens\";enableScreens();import Screens from\"./navigation/Screens\";import{Images,articles,argonTheme}from\"./constants\";var assetImages=[Images.Onboarding,Images.LogoOnboarding,Images.Logo,Images.Pro,Images.ArgonLogo,Images.iOSLogo,Images.androidLogo];articles.map(function(article){return assetImages.push(article.image);});function cacheImages(images){return images.map(function(image){if(typeof image===\"string\"){return Image.prefetch(image);}else{return Asset.fromModule(image).downloadAsync();}});}export default(function(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoadingComplete=_useState2[0],setLoading=_useState2[1];var _useFonts=useFonts({'ArgonExtra':require(\"./assets/font/argon.ttf\")}),_useFonts2=_slicedToArray(_useFonts,1),fontsLoaded=_useFonts2[0];function _loadResourcesAsync(){return Promise.all(_toConsumableArray(cacheImages(assetImages)));}function _handleLoadingError(error){console.warn(error);};function _handleFinishLoading(){setLoading(true);};if(!fontsLoaded&&!isLoadingComplete){return React.createElement(AppLoading,{startAsync:_loadResourcesAsync,onError:_handleLoadingError,onFinish:_handleFinishLoading});}else if(fontsLoaded){return React.createElement(NavigationContainer,null,React.createElement(GalioProvider,{theme:argonTheme},React.createElement(Block,{flex:true},React.createElement(Screens,null))));}return null;});","map":{"version":3,"sources":["/home/daniel/localhost/mktapp/mobile/App.js"],"names":["React","useState","AppLoading","useFonts","Asset","Block","GalioProvider","NavigationContainer","enableScreens","Screens","Images","articles","argonTheme","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","props","isLoadingComplete","setLoading","require","fontsLoaded","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,C,uDAEA,OAASC,UAAT,KAA2B,MAA3B,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,KAAT,KAAsB,YAAtB,CACA,OAASC,KAAT,CAAgBC,aAAhB,KAAqC,iBAArC,CACA,OAASC,mBAAT,KAAoC,0BAApC,CAGA,OAASC,aAAT,KAA8B,sBAA9B,CACAA,aAAa,GAEb,MAAOC,CAAAA,OAAP,4BACA,OAASC,MAAT,CAAiBC,QAAjB,CAA2BC,UAA3B,mBAGA,GAAMC,CAAAA,WAAW,CAAG,CAClBH,MAAM,CAACI,UADW,CAElBJ,MAAM,CAACK,cAFW,CAGlBL,MAAM,CAACM,IAHW,CAIlBN,MAAM,CAACO,GAJW,CAKlBP,MAAM,CAACQ,SALW,CAMlBR,MAAM,CAACS,OANW,CAOlBT,MAAM,CAACU,WAPW,CAApB,CAWAT,QAAQ,CAACU,GAAT,CAAa,SAAAC,OAAO,QAAIT,CAAAA,WAAW,CAACU,IAAZ,CAAiBD,OAAO,CAACE,KAAzB,CAAJ,EAApB,EAEA,QAASC,CAAAA,WAAT,CAAqBC,MAArB,CAA6B,CAC3B,MAAOA,CAAAA,MAAM,CAACL,GAAP,CAAW,SAAAG,KAAK,CAAI,CACzB,GAAI,MAAOA,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CAC7B,MAAOG,CAAAA,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAP,CACD,CAFD,IAEO,CACL,MAAOpB,CAAAA,KAAK,CAACyB,UAAN,CAAiBL,KAAjB,EAAwBM,aAAxB,EAAP,CACD,CACF,CANM,CAAP,CAOD,CAED,eAAe,SAAAC,KAAK,CAAI,eACkB9B,QAAQ,CAAC,KAAD,CAD1B,wCACf+B,iBADe,eACIC,UADJ,6BAEF9B,QAAQ,CAAC,CAC3B,aAAc+B,OAAO,2BADM,CAAD,CAFN,wCAEjBC,WAFiB,eAMtB,QAASC,CAAAA,mBAAT,EAA+B,CAC7B,MAAOC,CAAAA,OAAO,CAACC,GAAR,oBAAgBb,WAAW,CAACZ,WAAD,CAA3B,EAAP,CACD,CAED,QAAS0B,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAGlCC,OAAO,CAACC,IAAR,CAAaF,KAAb,EACD,EAEF,QAASG,CAAAA,oBAAT,EAAgC,CAC7BV,UAAU,CAAC,IAAD,CAAV,CACD,EAED,GAAG,CAACE,WAAD,EAAgB,CAACH,iBAApB,CAAuC,CACrC,MACE,qBAAC,UAAD,EACE,UAAU,CAAEI,mBADd,CAEE,OAAO,CAAEG,mBAFX,CAGE,QAAQ,CAAEI,oBAHZ,EADF,CAOD,CARD,IAQO,IAAGR,WAAH,CAAgB,CACrB,MACE,qBAAC,mBAAD,MACE,oBAAC,aAAD,EAAe,KAAK,CAAEvB,UAAtB,EACE,oBAAC,KAAD,EAAO,IAAI,KAAX,EACE,oBAAC,OAAD,MADF,CADF,CADF,CADF,CASD,CAED,MAAO,KAAP,CACD,CAzCD","sourcesContent":["import React, {useState} from \"react\";\nimport { Image } from \"react-native\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from '@use-expo/font';\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\n// Before rendering any navigation stack\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\n\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\n\n// cache app images\nconst assetImages = [\n  Images.Onboarding,\n  Images.LogoOnboarding,\n  Images.Logo,\n  Images.Pro,\n  Images.ArgonLogo,\n  Images.iOSLogo,\n  Images.androidLogo\n];\n\n// cache product images\narticles.map(article => assetImages.push(article.image));\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default props => {\n  const [isLoadingComplete, setLoading] = useState(false);\n  let [fontsLoaded] = useFonts({\n    'ArgonExtra': require('./assets/font/argon.ttf'),\n  });\n\n  function _loadResourcesAsync() {\n    return Promise.all([...cacheImages(assetImages)]);\n  }\n\n  function _handleLoadingError(error) {\n    // In this case, you might want to report the error to your error\n    // reporting service, for example Sentry\n    console.warn(error);\n  };\n\n function _handleFinishLoading() {\n    setLoading(true);\n  };\n\n  if(!fontsLoaded && !isLoadingComplete) {\n    return (\n      <AppLoading\n        startAsync={_loadResourcesAsync}\n        onError={_handleLoadingError}\n        onFinish={_handleFinishLoading}\n      />\n    );\n  } else if(fontsLoaded) {\n    return (\n      <NavigationContainer>\n        <GalioProvider theme={argonTheme}>\n          <Block flex>\n            <Screens />\n          </Block>\n        </GalioProvider>\n      </NavigationContainer>\n    );\n  }\n\n  return null;\n}\n\n// export default class App extends React.Component {\n//   state = {\n//     isLoadingComplete: false\n//   };\n\n//   render() {\n//     if (!this.state.isLoadingComplete) {\n//       return (\n//         <AppLoading\n//           startAsync={this._loadResourcesAsync}\n//           onError={this._handleLoadingError}\n//           onFinish={this._handleFinishLoading}\n//         />\n//       );\n//     } else {\n//       return (\n//         <NavigationContainer>\n//           <GalioProvider theme={argonTheme}>\n//             <Block flex>\n//               <Screens />\n//             </Block>\n//           </GalioProvider>\n//         </NavigationContainer>\n//       );\n//     }\n//   }\n\n//   _loadResourcesAsync = async () => {\n//     return Promise.all([...cacheImages(assetImages)]);\n//   };\n\n//   _handleLoadingError = error => {\n//     // In this case, you might want to report the error to your error\n//     // reporting service, for example Sentry\n//     console.warn(error);\n//   };\n\n//   _handleFinishLoading = () => {\n//     this.setState({ isLoadingComplete: true });\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}